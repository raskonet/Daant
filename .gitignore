# --- General ---
.DS_Store
Thumbs.db
desktop.ini

# --- IDEs / Editors ---
.idea/
.vscode/
*.suo
*.user
*.sln
*.sublime-workspace
*.sublime-project

# --- Python ---
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a PyInstaller script; this is recalled
#  here just to make sure everything is dealt with.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Environments
.env
.venv/
venv/
myenv/ # Your specific virtualenv name
env/
ENV/
# Include any other virtualenv names you use

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# IPython Notebook
.ipynb_checkpoints

# --- Node.js / JavaScript (Frontend - Next.js) ---
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.development.local
.env.test.local
.env.production.local
.env.local # Specifically for Next.js

# Next.js build output
.next/
out/

# --- Terraform ---
# .terraformディレクトリを無視（Terraformがプラグインやモジュールを格納する場所）
.terraform/
# .tfstateファイルと.tfstate.backupファイルを無視（Terraformの状態ファイル）
*.tfstate
*.tfstate.backup
# .tfvarsファイルを無視（機密情報を含む可能性があるため）
*.tfvars
# Terraformのクラッシュログファイルを無視
crash.log
crash.*.log
# Terraformのオーバーライドファイルを無視（ローカルでのみ使用されるべき）
override.tf
override.tf.json
*_override.tf
*_override.tf.json
# Terraform CLI設定ファイルを無視
.terraformrc
terraform.rc

# --- Operating System Files ---
.DS_Store
Thumbs.db
desktop.ini

# --- Other Specific Project Files (Add as needed) ---
# Example: If you have a local SQLite database for development
# *.sqlite3
# local_db.db

# Model files (if you are using Git LFS for them, you might still want to ignore the actual files
# if LFS isn't set up correctly on a collaborator's machine, to prevent accidental commit of pointers.
# However, if LFS is consistently used, you might not need to ignore them here if .gitattributes handles it.)
# Consider if your models are truly transient or part of the source.
# If they are large and managed by LFS, .gitattributes is the primary control.
# If you want to be absolutely sure they are never committed directly:
# models/*.h5
# models/*.pt
# backend/models/*.h5  # More specific path if they are always there
# backend/models/*.pt

# Jupyter Notebooks if you only want to commit the .py versions
# *.ipynb

# Compiled output from other languages if used (e.g. Java .class, C++ .o)
# *.class
# *.o

# Temporary files created by Gradio (if any, not usually needed to ignore)
# gradio_cached_examples/
